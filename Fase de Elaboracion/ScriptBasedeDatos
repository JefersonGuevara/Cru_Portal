    drop database PrototipoCRU
    go
    create database PrototipoCRU
    go
    use PrototipoCRU
    go


    create table tipoidentificacion(
    id_tipoidentificacion int  IDENTITY(1,1) not null,
    valor_tipoidentificacion varchar(50) not null,
    primary key (id_tipoidentificacion)
    );

    INSERT INTO tipoidentificacion (valor_tipoidentificacion) VALUES ('Cedula'),('Tarjeta de Identidad'),('Cedula Extranjeria')
        go

    create table estadocivil(
    id_estadocivil int Identity(1,1) not null,
    valor_estadocivil varchar(20) not null,
    primary key  (id_estadocivil)
    );


    INSERT INTO estadocivil (valor_estadocivil) VALUES ('Soltero'),('Casado'),('Union libre'), ('Divorciado'), ('Viudo')
        go
    CREATE TABLE estado_usuario_cru(
        Id_estado_usuario_cru int Identity(1,1),
        Descripcion_estado_usuario_cru varchar(30) NOT NULL,
        primary key (Id_estado_usuario_cru)
        );
    GO

 INSERT INTO estado_usuario_cru (Descripcion_estado_usuario_cru) VALUES ('Activo'),('Retirado'),('Admitido'), ('En proceso Admision'), ('Expulsado'), ('Inactivo')
       --cargar todos los numero del 101 hasta el 111 y hasta el 13
    create table piso(
    id_piso int  IDENTITY(1,1) not null,
    valor_piso varchar (2) not null,
    primary key (id_piso)
     );

    INSERT INTO piso (valor_piso) VALUES ('1'),('2'),('3'),('4'),('5'),('6'),('7'),('8'),('9'),('10'),('11'),('12'),('13')

   
        go
    create table cargo (
    id_cargo int  IDENTITY(1,1) not null,
    valor_cargo varchar(20) not null,
    primary key  (id_cargo)
    );
INSERT INTO cargo (valor_cargo) VALUES ('Psicologo'),('Gestor Social'), ('Mantenimiento'),('Director')
        go

    create table tipo_expediente(
    id_tipo_exp int   IDENTITY(1,1) not null,
    valortipoexp varchar (50) not null,
    primary key  (id_tipo_exp)
    );
INSERT INTO tipo_expediente (valortipoexp) VALUES ('Psicologico'),('Social')
        go
    create table rol(
    id_rol int  IDENTITY(1,1) not null,
    descripcion_rol varchar (50) not null,
    primary key  (id_rol)
    );
    INSERT INTO rol (descripcion_rol) VALUES ('Empleado'), ('Estudiante'), ('Mantenimiento'),('Administrador')
        go

    create table tipo_solicitud(
    id_tipo_solicitud int  IDENTITY(1,1) not null,
    valor_tipo_solicitud varchar (50) not null,
    primary key (id_tipo_solicitud)
    );
  INSERT INTO tipo_solicitud (valor_tipo_solicitud) VALUES ('Cita'),('Reparacion'), ('Administrativa')
        go

    create table estado_solicitud(
    id_estado_solciitud int   IDENTITY(1,1) not null,
    valor_estado_solciitud varchar (50) not null,
    primary key (id_estado_solciitud)
    );
 INSERT INTO estado_solicitud (valor_estado_solciitud) VALUES ('Recibida'),('Atendiendo'), ('Suspendida'), ('Solucionada'), ('Cancelada'), ('Proceso de aprobacion')
        go


    create table prioridad_solicitud(
    id_prioridad_solciitud int  IDENTITY(1,1) not null,
    valor_prioridad_solciitud varchar (50) not null,
    primary key (id_prioridad_solciitud)
    );
 INSERT INTO prioridad_solicitud (valor_prioridad_solciitud) VALUES ('Alta'),('Media'), ('Baja'), ('Urgente')
        go


    --
    create table tipo_espacio(
    id_tipo_espacio int  IDENTITY(1,1) not null,
    valor_tipo_espacio varchar (20) not null,
    primary key (id_tipo_espacio)
     );
INSERT INTO tipo_espacio (valor_tipo_espacio) VALUES ('Residencial'),('Recreativo'), ('Almacenamiento')
        go


    create table tipo_elemento (
    id_tipo_elemento int  IDENTITY(1,1) not null,
    valor_tipo_elemento varchar (30) not null,
    primary key (id_tipo_elemento)
    );
INSERT INTO tipo_elemento (valor_tipo_elemento) VALUES ('Uso Residencial'),('Uso Recreativo'), ('Tecnologico')
        go



    Create Table departamento (
        id_departamento int IDENTITY(1,1) not null,
        descripcion_departamento varchar (100) not null,
        primary key (id_departamento)
       );


INSERT INTO departamento (descripcion_departamento) VALUES
                    ('ANTIOQUIA'),                    ('ATLANTICO'),
                    ('BOGOTA'),                    ('BOLIVAR'),
                    ('BOYACA'),                    ('CALDAS'),
                    ('CAQUETA'),                    ('CAUCA'),
                    ('CESAR'),                    ('CORDOBA'),
                    ('CUNDINAMARCA'),                    ('CHOCO'),
                    ('HUILA'),                    ('GUAVIARE'),
                    ('MAGDALENA'),                    ('META'),
                    ('NARIÃ‘O'),                    ('N. DE SANTANDER'),
                    ('QUINDIO'),                    ('RISARALDA'),
                    ('SANTANDER'),                    ('SUCRE'),
                    ('TOLIMA'),                    ('VALLE DEL CAUCA'),
                    ('ARAUCA'),                    ('CASANARE'),
                    ('PUTUMAYO'),                    ('SAN ANDRES'),
                    ('AMAZONAS'),                    ('GUAINIA'),
                    ('LA GUAJIRA'),                    ('VAUPES'),
                    ('VICHADA')

    create table pais(
            id_pais int IDENTITY(1,1) not null,
            descripcionPais varchar(100) not null,
            primary key (id_pais)
            );
    INSERT INTO pais (descripcionPais) VALUES
                            ('ARGENTINA'),  ('BOLIVIA'),
                            ('BRASIL'),     ('COLOMBIA'),
                            ('CHILE'),      ('ECUADOR'),
                            ('GUYANA'),     ('PARAGUAY'),
                            ('PERU'),       ('SURINAM'),
                            ('URUGUAY'),    ('VENEZUELA'),
                            ('GUAYANA FRANCESA'), ('ISLAS MALVINAS')


    create table raza (
    id_raza int IDENTITY (1,1) not null,
    descripcion_raza varchar (14) not null,
    primary key (id_raza)
    );
    INSERT INTO raza (descripcion_raza) VALUES ('Afrocolombiano'),('Raizal'),('Indigena'),('Mulato'),('Rom'),('Negro'),('Ninguno')
    go

    --Todos los posibles de tipos de sangre 
    create table tipodesangre(
        id_tipo_sangre int IDENTITY(1,1)  not null,
        descripcion_tipo_sangre varchar(11) not null,
        primary key(id_tipo_sangre)
    );
    INSERT INTO tipodesangre (descripcion_tipo_sangre) VALUES   ('O negativo'),('O positivo'),
                                                                ('A negativo'),('A positivo'),
                                                                ('B negativo'),('B positivo'),
                                                                ('AB negativo'),('AB positivo')                                                        
    go

    create table tipodevivienda (
    id_tipodevivienda int IDENTITY(1,1) not null,
    descripcion_tipovivienda varchar(9) not null,
    primary key (id_tipodevivienda)
    );
    INSERT INTO tipodevivienda (descripcion_tipovivienda) VALUES ('Arrendada'),('Familiar'),('Propia')
    go



    create table empleado(
    id_empleado int  IDENTITY(1,1) not null,
    tipoidentificacion_empleado int  not null,
    Noidentificacion_empleado varchar(15) not null,
    nombres_empleado varchar (100) not null,
    apellidos_empleado varchar (100) not null,
    Telefonoempleado varchar (10) not null,
    fechanacimiento_empleado date not null,
    estadocivil_empleado int not null,
    correo_empleado varchar (100) not null,
    cargo_empleado int not null,
    estado_usuario_cru int not null,
    primary key (id_empleado),
        CONSTRAINT  fk_tipodocumento_empleado
            FOREIGN KEY (  tipoidentificacion_empleado )
            REFERENCES    tipoidentificacion  (  id_tipoidentificacion ),

        CONSTRAINT  fk_estadocivil_empleado
            FOREIGN KEY (  estadocivil_empleado )
            REFERENCES    estadocivil (  id_estadocivil ),
 CONSTRAINT  fk_estado_empleado
            FOREIGN KEY (estado_usuario_cru )
            REFERENCES    estado_usuario_cru (  Id_estado_usuario_cru ),
        CONSTRAINT  fk_cargo_empleado
            FOREIGN KEY (cargo_empleado )
            REFERENCES    cargo (  id_cargo )
    );

 INSERT INTO empleado ( tipoidentificacion_empleado,
                        Noidentificacion_empleado,
                        nombres_empleado,
                        apellidos_empleado,
                        fechanacimiento_empleado,
                        estadocivil_empleado,
                        correo_empleado,
                        cargo_empleado,estado_usuario_cru,
                        Telefonoempleado) 
                                        VALUES (1,'1012383756','Juan', 'Guevara','1998-1-10',1,'guevarajeferson@gmail.com',1,1,'3333333'),
                                               (1,'1026289202','Alejandra', 'Leal','1997-8-5',1,'malp@gmail.com',2,1,'88888888'),
                                                (1,'104587412','Carlos', 'Gutierrez','1994-5-20',2,'carlos@gmail.com',4,1,'55555555')
    go

    create table estado_espacio (
        id_estado_espacio int IDENTITY (1,1) not null primary key,
        valor_estado_espacio varchar (10) not null,
        );

    insert into estado_espacio (valor_estado_espacio) values ('Disponible'), ('Ocupado'), ('Reparacion')
        go

    create table espacio (
    id_espacio int  IDENTITY(1,1) not null,
    descripcion_espacio varchar (100) not null,
    id_tipo_espacio_ int not null,
    id_piso_espacio int not null,
    capacidad int not null,
     estado_espacio_o int not null,
    primary key (id_espacio),
        CONSTRAINT  fk_espacio_piso
            FOREIGN KEY (  id_piso_espacio )
            REFERENCES    piso ( id_piso),
        CONSTRAINT  fk_tipo_espacio
            FOREIGN KEY (  id_tipo_espacio_ )
            REFERENCES    tipo_espacio ( id_tipo_espacio),
      CONSTRAINT  fk_estado_espacio
            FOREIGN KEY (  estado_espacio_o )
            REFERENCES   estado_espacio ( id_estado_espacio)
      
      
    );

        insert into espacio (descripcion_espacio,id_tipo_espacio_,id_piso_espacio,capacidad,estado_espacio_o) values 
                                ('301',1,3,1,2),
                                ('401',1,4,1,2),
                                ('Bodega',3,1,4,1)
go


    create table estudiante(
    id_estudiante int  IDENTITY(1,1) not null,
    estado_usuario_cru_estudiante int not null, --Tabla
    
    tipoidentificacion_estudiante int  not null, -- Tabla
    Noidentificacion varchar(15) not null,
    
    nombres_estudiante varchar (100) not null,
    apellidos_estudiante varchar (100) not null,
   
    estadocivil_estudiante int not null,        -- Tabla
    Direccion_estudiante varchar (100) not null,
    telefono_estudiante_ varchar (20) not null,
    correo_estudiante varchar (100) not null,
    tipo_sangre_estudiante int not null,        --Tabla

    fechanacimiento_estudiante date not null,
    municipioNacimiento varchar(100) not null,
    departamentoNacimiento int not null,        --Tabla
    Paisnacimiento int not null,                --Tabla
    Servicio_Salud varchar (200) not null,

    Dispacidad_estudiante varchar (2) not  null,
    descripcion_dispacacidad_estudainte varchar (200),
    Situaciondesplazamientoestudiante varchar (2) not null,
    Numerohermanos int not null,
    estrato int  not null,
    tipodevivienda_estudiante int not null, --Tabla
    apoyouniversidad varchar (2) not null,
    descripcion_apoyo_ varchar(100),
raza_estudiante int not null,               --Tabla
id_espacio_estudiante int,


    primary key (id_estudiante),
        CONSTRAINT  fk_tipovivienda_estudiante
            FOREIGN KEY (  tipodevivienda_estudiante )
            REFERENCES    tipodevivienda  ( id_tipodevivienda  ),

        CONSTRAINT  fk_tipodocumento_estudiante
            FOREIGN KEY (  tipoidentificacion_estudiante )
            REFERENCES    tipoidentificacion  (  id_tipoidentificacion ),

        CONSTRAINT  fk_tiposangre_estudiante
            FOREIGN KEY (  tipo_sangre_estudiante)
            REFERENCES    tipodesangre  (  id_tipo_sangre ),
    CONSTRAINT  fk_pais_estudiante
            FOREIGN KEY (  Paisnacimiento)
            REFERENCES    Pais  (  id_pais ),

      CONSTRAINT  fk_departamento_estudiante
            FOREIGN KEY (  departamentoNacimiento)
            REFERENCES    departamento  (  id_departamento ),

        CONSTRAINT  fk_estadocivil_estudiante
            FOREIGN KEY (  estadocivil_estudiante )
            REFERENCES    estadocivil  ( id_estadocivil),

         CONSTRAINT  fk_raza_estudiante
            FOREIGN KEY (  raza_estudiante )
            REFERENCES    raza  ( id_raza),
                  
        CONSTRAINT  fk_estado_usuario_cru_estudiante
            FOREIGN KEY (  estado_usuario_cru_estudiante )
            REFERENCES    estado_usuario_cru  ( Id_estado_usuario_cru),
        CONSTRAINT  fk_espacio_estudiante
            FOREIGN KEY (id_espacio_estudiante   )
            REFERENCES    espacio ( id_espacio)

    );


    INSERT into estudiante (estado_usuario_cru_estudiante,
                            tipoidentificacion_estudiante,
                            Noidentificacion,
                            nombres_estudiante,
                            apellidos_estudiante,
                            estadocivil_estudiante,
                            Direccion_estudiante,
                            telefono_estudiante_,
                            correo_estudiante,
                            tipo_sangre_estudiante,
                            fechanacimiento_estudiante,
                            municipioNacimiento,
                            departamentoNacimiento,
                            Paisnacimiento,
                            Servicio_Salud,
                            Dispacidad_estudiante,
                            descripcion_dispacacidad_estudainte,
                            Situaciondesplazamientoestudiante,
                            Numerohermanos,
                            estrato,
                            tipodevivienda_estudiante,
                            apoyouniversidad,
                            descripcion_apoyo_,
                            raza_estudiante,
                            id_espacio_estudiante
                            )
                        VALUES  (1,1,'1012333333','Jefer.','Leal',1,'Cra 45 No 52 - 25','2225552','jefers@gmail.com',4,'01-01-1992','Bogota',11,4,'Compensar','No','Ninguna','No',0,3,1,'No','Ninguno',7,1 ),
                                (1,1,'1012666666','Oscar.','Leal',1,'Cll 45 No 52 - 25','2225552','oscars@gmail.com',2,'02-09-1992','Mesa',23,4,'Famisanar','No','Ninguna','No',2,3,3,'No','Ninguno',7,1)


    create table datosuniversidad (
        id_datosuniversidad int IDENTITY (1,1) not null primary key,
    Universidad_estudiante varchar (200) not null,
    Facultad_estudiante varchar (200) not null,
    Programa_estudiante varchar (200) not null,
    Puntaje_Basico_Matricula varchar (20) not null,-- 0  a 50
    Promedio_Academico_estudiante varchar (20),
   AÃ±o_ingreso_Universidad_ varchar  (4) not null,
   semestre_ingreso_universidad int not null,
    Porcentaje_Avance varchar (2),
    id_estudiante_datosuniversidad int not null ,

 CONSTRAINT  fk_datosuniversidad_estudiante
            FOREIGN KEY ( id_estudiante_datosuniversidad )
            REFERENCES    estudiante ( id_estudiante)

    );

INSERT into datosuniversidad (Universidad_estudiante,
                            Facultad_estudiante,
                            Programa_estudiante, 
                            Puntaje_Basico_Matricula,
                            Promedio_Academico_estudiante,
                            AÃ±o_ingreso_Universidad_,
                            semestre_ingreso_universidad,
                            Porcentaje_Avance,
                            id_estudiante_datosuniversidad
                            ) VALUES 
                            ('Universidad Nacional','Ingenieria','Ing. sistemas','9.112','4.5','2012',1,'50',1),
                            ('Universidad Nacional','Ingenieria','Ing. sistemas','8.412','4.8','2011',1,'80',2)


    create table acudiente_estudiante(
    id_acudiente  int IDENTITY(1,1) not null,
    dependencia_econo_ varchar (2) not null,
    nombre_acudiente varchar (100)  not null,
    apellidos_acudiente varchar (100) not null,
    ocupacion_acudiente varchar (100) not null,
    direccion_acudiente varchar(200) not null,
    departamento_acudiente int not null,
    telefono_acudiente varchar (20) not null,
    parentezo_acudiente varchar (100) not null,
    correo_acudiente varchar (100) not null,
    id_estudiante_acu int not null,
    primary key (id_acudiente),
     CONSTRAINT  fk_acudiente_departamento
            FOREIGN KEY (  departamento_acudiente )
            REFERENCES    departamento ( id_departamento),
     CONSTRAINT  fk_acudiente_estudiante
            FOREIGN KEY (  id_estudiante_acu )
            REFERENCES    estudiante  ( id_estudiante)
    );

INSERT into acudiente_estudiante (dependencia_econo_,
                                nombre_acudiente,
                                apellidos_acudiente,
                                ocupacion_acudiente,
                                direccion_acudiente,
                                departamento_acudiente,
                                telefono_acudiente,
                                parentezo_acudiente,
                                correo_acudiente,
                                id_estudiante_acu
                                ) values    ('No','Jose', 'Gonzalez', 'Empleado','Call 4 No 2 - 1 ',   8 ,'320000005','Abuelo','jose@hotmail.com',1),
                                            ('No','Miria','Espinosa', 'Empleado','Calle 5 No 85 -  15',13,'6363636','Tia','Miria@hotmail.com',2)
   

    create table archivo_estudiante(

    id_archivo int not null,
    id_estudiante_archi int not null,
    descripcion_archivo varchar (100) not null,
    direccion_archivo varchar (500) not null,
    primary key (id_archivo),
     CONSTRAINT  fk_archivo_estudiante
            FOREIGN KEY (  id_estudiante_archi )
            REFERENCES    estudiante  (  id_estudiante ),
    
    );





    create table historicoestudiante(
    id_historico_expediente int  IDENTITY(1,1) not null,
    id_estudiante int not null,
    fecha_historico_expediente date not null,
    descripcion_historico_expediente varchar (500) not null,
    id_empleado_historicoestudiante int,
    primary key (id_historico_expediente),

      CONSTRAINT  fk_estudiante_historico
            FOREIGN KEY (id_estudiante )
            REFERENCES    estudiante ( id_estudiante ),
      CONSTRAINT  fk_empleado_historicoestudiante
            FOREIGN KEY (id_empleado_historicoestudiante )
            REFERENCES    empleado( id_empleado )

    );
-- Estos registros se crear por medio de proco por observaciones del empleado
        insert into  historicoestudiante (id_estudiante,
                                         fecha_historico_expediente, 
                                         descripcion_historico_expediente,
                                          id_empleado_historicoestudiante) 
                                        values 
                                        (1, '2017-01-05','Se registra el estudiante', null),
                                        (2, '2017-01-05','Se registra el estudiante', null),
                                        (2, '2017-01-06','Se actualiza acudiente' , 2)
    create table login(
    id_usuario_login int   IDENTITY(1,1) not null,
    usuario_login varchar(8) not null,
    contrasena_login varchar (12) not null,
    id_estudiante_usuario int,
    id_rol_login int,
    id_empleado_usuario int,
    primary key (id_usuario_login),
        CONSTRAINT  fk_usuarioingreso_estudiante
            FOREIGN KEY (  id_estudiante_usuario )
            REFERENCES    estudiante  ( id_estudiante),
        CONSTRAINT  fk_usuarioingreso_empleado
            FOREIGN KEY (  id_empleado_usuario )
            REFERENCES    empleado  ( id_empleado),
            CONSTRAINT  fk_rol_login
            FOREIGN KEY (  id_rol_login )
            REFERENCES    rol  ( id_rol)
        );

    INSERT into login (usuario_login,
                       contrasena_login,
                       id_estudiante_usuario,
                       id_rol_login,
                       id_empleado_usuario )values 
                        ('jeferlea','123456',1,3,null),
                        ('oscarlea','123456',2,3,null),
                        ('juanguev','123456',null,1,1),
                        ('alejleal','123456',null,2,2),
                        ('carlosgu','123456',null,4,3)




 



    create table elemento(
    id_elemento int  IDENTITY(1,1) not null,
    id_tipo_elemento_ int not null,
    descripcion varchar(50) not null,
    marca varchar(50) ,
    serrial varchar (50),
    primary key (id_elemento),
       CONSTRAINT  fk_tipo_elemento
            FOREIGN KEY (  id_tipo_elemento_ )
            REFERENCES    tipo_elemento  ( id_tipo_elemento)
    );


    INSERT INTO elemento (id_tipo_elemento_,descripcion, marca, serrial)values 
                        (1,'Cama',null,null),
                        (1,'Estufa','HACEB', null),
                        (3,'Computador','HP', 'MXJasg3s5')

    go
    create table inventario_espacio(
    id_inventario_esp int   IDENTITY(1,1) not null,
    id_elemento_inventario_espacio int not null,
    cantidad_inventario_elemento_espacio int not null,
    fecha_inventario_espacio date not null,
    id_espacio_inventario__ int not null,
    id_empleado_inventario int,
    primary key (id_inventario_esp),
       CONSTRAINT  fk_elemento_inventario
            FOREIGN KEY (  id_elemento_inventario_espacio )
            REFERENCES    elemento  ( id_elemento),
       CONSTRAINT  fk_espacio_inventario
            FOREIGN KEY (  id_espacio_inventario__)
            REFERENCES    espacio  ( id_espacio),
      CONSTRAINT  fk_empleado_inventario
            FOREIGN KEY (  id_empleado_inventario)
            REFERENCES    empleado ( id_empleado),
         
    );

INSERT into inventario_espacio (
                                id_elemento_inventario_espacio,
                                cantidad_inventario_elemento_espacio,
                                fecha_inventario_espacio,
                                id_espacio_inventario__,
                                id_empleado_inventario
                                )values 

                                    (1,2,'2017-2-1',1,3),
                                    (2,1,'2017-2-1',1,3),
                                    (1,1,'2017-2-1',2,3),
                                    (2,1,'2017-2-1',2,3)
                                    go



    create table solicitud (
    id_solicitud int  IDENTITY(1,1) not null,
    id_tipo_solicitud__ int not null,
    id_estado_solicitud__ int not null,
    id_espacio_solicitud int not null,
    id_prioridad_solciitud__ int not null,
    descripcion_solicitud varchar (200) not null,
    id_estudiante_solicitud int not null,
    id_empleado_solicitud int not null,
    primary key (id_solicitud),



       CONSTRAINT  fk_tipo_solicitud
            FOREIGN KEY ( id_tipo_solicitud__ )
            REFERENCES    tipo_solicitud (id_tipo_solicitud),
       CONSTRAINT  fk_estado_solicitud
            FOREIGN KEY ( id_estado_solicitud__ )
            REFERENCES    estado_solicitud ( id_estado_solciitud),

       CONSTRAINT  fk_espacio_solcitud
            FOREIGN KEY ( id_espacio_solicitud )
            REFERENCES    espacio (id_espacio ),
       CONSTRAINT  fk_prioridad_solicitud
            FOREIGN KEY ( id_prioridad_solciitud__ )
            REFERENCES    prioridad_solicitud (id_prioridad_solciitud ),
            CONSTRAINT  fk_empleado_solicitud
            FOREIGN KEY (  id_empleado_solicitud)
            REFERENCES    empleado ( id_empleado),
       CONSTRAINT  fk_estudiante_solcitud
            FOREIGN KEY ( id_estudiante_solicitud )
            REFERENCES    estudiante (id_estudiante )
    );

insert into solicitud  (
                          id_tipo_solicitud__,
                            id_estado_solicitud__,
                            id_espacio_solicitud,
                            id_prioridad_solciitud__,
                            descripcion_solicitud,
                            id_estudiante_solicitud,
                            id_empleado_solicitud
                            ) values (1,4,1,2,'No puedo dormir biem. tengo muchas pesadillas', 1,2),
                                    (1,4,1,2,'Se rompio el lavamanos',1,3)


   
    create table reparacion_espacio(
    id_reparacion int  IDENTITY(1,1) not null,
    fecha_reparacion_espacio date  not null,
    descripcion_reparacion varchar (500) not null,

    id_espacio_reparacion int not null,
    id_empleado_reparacion int not null,
    costo bigint not null,
    id_solicitud_reparacion_espacio int not null,

    primary key (id_reparacion),
       CONSTRAINT  fk_espacio_reparacion
            FOREIGN KEY (  id_espacio_reparacion)
            REFERENCES    espacio  ( id_espacio),

       CONSTRAINT  fk_eempleado_reparacion
            FOREIGN KEY (  id_empleado_reparacion)
            REFERENCES    empleado ( id_empleado),

        CONSTRAINT  fk_solicitud_reparacion
            FOREIGN KEY (  id_solicitud_reparacion_espacio)
            REFERENCES    solicitud ( id_solicitud)


    );
insert into reparacion_espacio (fecha_reparacion_espacio,
                                descripcion_reparacion,
                                id_espacio_reparacion,
                                id_empleado_reparacion,
                                costo,
                                id_solicitud_reparacion_espacio
                                ) values ('2017-02-03','Se realiza compra de lavamanos e instalacion',1,3,100000,2)

go



    create table historico_solicitud(
    id_historico_solicitud int  IDENTITY(1,1) not null,
    id_caso_anotacion int not null,
    descripcion_anotacion varchar (200) not null,
    fecha_modificacion date not null,
    id_empleado_historico int,
    primary key (id_historico_solicitud),
       CONSTRAINT  fk_solcitud_historio
            FOREIGN KEY (  id_caso_anotacion)
            REFERENCES    solicitud ( id_solicitud),
       CONSTRAINT  fk_empleado_historio
            FOREIGN KEY (  id_empleado_historico)
            REFERENCES    empleado ( id_empleado)

    );


    create table solucion(
    id_solucion int  IDENTITY(1,1) not null,
    descripcion_solucion varchar(100) not null,
    id_empleado_solucion int,
    fecha_solucion date, 
    primary  key (id_solucion),
    id_solicitud_solucion int not null,
       CONSTRAINT  fk_solucion_solicitud
            FOREIGN KEY (  id_solicitud_solucion)
            REFERENCES    solicitud ( id_solicitud),
        CONSTRAINT  fk_empleado_solucion
            FOREIGN KEY (  id_empleado_solucion)
            REFERENCES    empleado ( id_empleado)
    );



    create table estado_cita(
    id_estado_cita int   IDENTITY(1,1) not null,
    valor_estado_cita varchar (50) not null,
    primary key (id_estado_cita)
    );
 INSERT INTO estado_cita (valor_estado_cita) VALUES ('Pendiente'), ('Atendida'),('No asistio'),('Cancelada');
        go

 create table expediente (
    id_expediente int  IDENTITY(1,1) not null,
    id_tipo_exp int not null,
    id_estudiante_exp int not null,

    fecha_expediente date not null,
    descripcion_Expediente varchar(500) not null,
   

    primary key (id_expediente),
        CONSTRAINT  fk_estudiante_eexpediente
            FOREIGN KEY (  id_estudiante_exp)
            REFERENCES    estudiante ( id_estudiante),
        CONSTRAINT  fk_tipo_exo
            FOREIGN KEY (  id_tipo_exp )
            REFERENCES    tipo_expediente  ( id_tipo_exp)
    );

    create table cita(
        id_cita int  IDENTITY(1,1)not null,
         id_estudiante_cita int not null, 
         id_empleado_cita int not null, 
         id_solicitud_cita int not null,
         estado_cita_ int not null, 
         id_expediente_cita int null, 
         fecha_cita date not null,
         primary key (id_cita),

           CONSTRAINT  fk_cita_estudiante
            FOREIGN KEY (  id_estudiante_cita)
            REFERENCES    estudiante ( id_estudiante),

            CONSTRAINT  fk_cita_empleado
            FOREIGN KEY (  id_empleado_cita)
            REFERENCES    empleado ( id_empleado),
            
            CONSTRAINT  fk_cita__solicitud
            FOREIGN KEY (  id_solicitud_cita)
            REFERENCES    solicitud ( id_solicitud),
            
            CONSTRAINT  fk_cita_expediente
            FOREIGN KEY (  id_expediente_cita)
            REFERENCES    expediente ( id_expediente),


            CONSTRAINT  fk_cita_estado
            FOREIGN KEY ( estado_cita_ )
            REFERENCES    estado_cita ( id_estado_cita)
            
    );

go



 

go

--procedimientos almacenados

create proc insertarempleado
    @valor_tipoidenti int,
    @Noidentificacion_empleado varchar(15) ,
    @nombres_empleado varchar (100) ,
    @apellidos_empleado varchar (100) ,
    @fechanacimiento_empleado date ,
    @valor_estadoci int,
    @correo_empleado varchar (100) ,
    @valor_carg int,
    @valor_estado int,
    @telefono_empl varchar (10)
    as 
    BEGIN
       
    insert into empleado  ( tipoidentificacion_empleado,
                        Noidentificacion_empleado,
                        nombres_empleado,
                        apellidos_empleado,
                        fechanacimiento_empleado,
                        estadocivil_empleado,
                        correo_empleado,
                        cargo_empleado,
                        estado_usuario_cru,
                        Telefonoempleado
                        ) values ( @valor_tipoidenti,
                        @Noidentificacion_empleado,
                        @nombres_empleado, 
                        @apellidos_empleado,
                        @fechanacimiento_empleado,
                        @valor_estadoci,
                        @correo_empleado, 
                        @valor_carg,
                        @valor_estado,
                        @telefono_empl) ;


   END
   GO

create proc consultartodosempleados
    as 
  SELECT    tipoidentificacion.valor_tipoidentificacion, empleado.Noidentificacion_empleado, empleado.nombres_empleado, empleado.apellidos_empleado, empleado.fechanacimiento_empleado, 
              empleado.correo_empleado, estadocivil.valor_estadocivil, cargo.valor_cargo, estado_usuario_cru.Descripcion_estado_usuario_cru, empleado.Telefonoempleado
                        FROM            tipoidentificacion INNER JOIN
                         empleado ON tipoidentificacion.id_tipoidentificacion = empleado.tipoidentificacion_empleado INNER JOIN
                         cargo ON empleado.cargo_empleado = cargo.id_cargo INNER JOIN
                         estadocivil ON empleado.estadocivil_empleado = estadocivil.id_estadocivil  INNER JOIN
                         estado_usuario_cru ON empleado.estado_usuario_cru = estado_usuario_cru.Id_estado_usuario_cru;
                     
   GO


create proc consultaremplead_pornombre_id
    @identificacion varchar (20),
    @nombre varchar(100)
    as 
    BEGIN
        
    if @identificacion = null
    SELECT    tipoidentificacion.valor_tipoidentificacion, empleado.Noidentificacion_empleado, empleado.nombres_empleado, empleado.apellidos_empleado, empleado.fechanacimiento_empleado, 
              empleado.correo_empleado, estadocivil.valor_estadocivil, cargo.valor_cargo, estado_usuario_cru.Descripcion_estado_usuario_cru, empleado.Telefonoempleado
                        FROM            tipoidentificacion INNER JOIN
                         empleado ON tipoidentificacion.id_tipoidentificacion = empleado.tipoidentificacion_empleado INNER JOIN
                         cargo ON empleado.cargo_empleado = cargo.id_cargo INNER JOIN
                         estadocivil ON empleado.estadocivil_empleado = estadocivil.id_estadocivil  INNER JOIN
                         estado_usuario_cru ON empleado.estado_usuario_cru = estado_usuario_cru.Id_estado_usuario_cru
                         where @nombre = empleado.nombres_empleado;

    else 
        SELECT    tipoidentificacion.valor_tipoidentificacion, empleado.Noidentificacion_empleado, empleado.nombres_empleado, empleado.apellidos_empleado, empleado.fechanacimiento_empleado, 
              empleado.correo_empleado, estadocivil.valor_estadocivil, cargo.valor_cargo, estado_usuario_cru.Descripcion_estado_usuario_cru, empleado.Telefonoempleado
                        FROM            tipoidentificacion INNER JOIN
                         empleado ON tipoidentificacion.id_tipoidentificacion = empleado.tipoidentificacion_empleado INNER JOIN
                         cargo ON empleado.cargo_empleado = cargo.id_cargo INNER JOIN
                         estadocivil ON empleado.estadocivil_empleado = estadocivil.id_estadocivil  INNER JOIN
                         estado_usuario_cru ON empleado.estado_usuario_cru = estado_usuario_cru.Id_estado_usuario_cru
                         where @identificacion = empleado.Noidentificacion_empleado;



   END
   GO



create proc actualizarempleado

    @valor_estadoci varchar(20),
    @correo_empleado varchar (100) ,
    @valor_carg varchar(20),
    @valor_estado varchar(30),
    @telefono_empl varchar (10)
    as 
    BEGIN
        declare @estad_civ int, @cargo_empl int, @estado int
       
        set @estad_civ = (select id_estadocivil from estadocivil where valor_estadocivil=@valor_estadoci);
        set @cargo_empl = (select id_cargo from cargo where valor_cargo = @valor_carg);
        set @estado = (select Id_estado_usuario_cru from  estado_usuario_cru where Descripcion_estado_usuario_cru = @valor_estado);
    update empleado set estadocivil_empleado=@estad_civ , cargo_empleado=@cargo_empl, estado_usuario_cru=@estado, correo_empleado=@correo_empleado, Telefonoempleado =@telefono_empl;
    
   END
   GO

create proc Tiposidentificacion_consultar
as
SELECT        id_tipoidentificacion, valor_tipoidentificacion
FROM            tipoidentificacion
go

create proc Cargo_consultar
as
SELECT        id_cargo, valor_cargo
FROM            cargo
go

create proc Estadocivile_consultar
as
SELECT        id_estadocivil, valor_estadocivil
FROM            estadocivil
go