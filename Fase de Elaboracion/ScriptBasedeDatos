use master
go

drop database PrototipoCRU
go

        create database PrototipoCRU
        go
        use PrototipoCRU
        go

            create table Permiso(
                Permiso_id Int Identity(1,1) not null primary key,
                Modulo varchar (50) not null,
                descripcion varchar(50) not null


                );
            go
            insert into Permiso(Modulo, descripcion)values ('Empleado','Puede Crear'),
                                                          ('Empleado','Puede Consultar'),
                                                          ('Empleado','Puede Actualizar'),
                                                          ('Espacio','Puede Crear'),
                                                          ('Espacio','Puede Consultar'),
                                                          ('Espacio','Puede Actualizar'),
                                                          ('Estudiante','Puede Crear'),
                                                          ('Estudiante','Puede Consultar'),
                                                          ('Estudiante','Puede Actualizar'),
                                                          ('Solicitud','Puede Crear'),
                                                          ('Solicitud','Puede Consultar'),
                                                          ('Solicitud','Puede Actualizar'),
                                                          ('Admision','Puede Crear'),
                                                          ('Admision','Puede Consultar'),
                                                          ('Admision','Puede Actualizar'),
                                                          ('Citas','Puede Crear'),
                                                          ('Citas','Puede Consultar'),
                                                          ('Citas','Puede Actualizar'),
                                                          ('Reparacion','Puede Crear'),
                                                          ('Reparacion','Puede Consultar'),
                                                          ('Reparacion','Puede Actualizar'),
                                                          ('Inventario','Puede Crear'),
                                                          ('Inventario','Puede Consultar'),
                                                          ('Inventario','Puede Actualizar'),
                                                          ('Elemento','Puede Crear'),
                                                          ('Elemento','Puede Consultar'),
                                                          ('Elemento','Puede Actualizar')
            go

            create table tipoidentificacion(
             id_tipoidentificacion int  IDENTITY(1,1) not null,
             valor_tipoidentificacion varchar(50) not null,
             primary key (id_tipoidentificacion)
             );
            go

            INSERT INTO tipoidentificacion (valor_tipoidentificacion) VALUES ('Cedula'),('Tarjeta de Identidad'),('Cedula Extranjeria')
            go

            create table estadocivil(
            id_estadocivil int Identity(1,1) not null,
            valor_estadocivil varchar(20) not null,
            primary key  (id_estadocivil)
            );
            go
        INSERT INTO estadocivil (valor_estadocivil) VALUES ('Soltero'),('Casado'),('Union libre'), ('Divorciado'), ('Viudo')
            go
        CREATE TABLE estado_usuario_cru(
            Id_estado_usuario_cru int Identity(1,1),
            Descripcion_estado_usuario_cru varchar(30) NOT NULL,
            primary key (Id_estado_usuario_cru)
            );
        GO

     INSERT INTO estado_usuario_cru (Descripcion_estado_usuario_cru) VALUES ('Activo'),('Retirado'),('Admitido'), ('En proceso Admision'), ('Expulsado'), ('Inactivo')
         go
           --cargar todos los numero del 101 hasta el 111 y hasta el 13
        create table piso(
        id_piso int  IDENTITY(1,1) not null,
        valor_piso varchar (2) not null,
        primary key (id_piso)
         );

        INSERT INTO piso (valor_piso) VALUES ('1'),('2'),('3'),('4'),('5'),('6'),('7'),('8'),('9'),('10'),('11'),('12'),('13')

       
            go
        create table cargo (
        id_cargo int  IDENTITY(1,1) not null,
        valor_cargo varchar(20) not null,
        primary key  (id_cargo)
        );
    INSERT INTO cargo (valor_cargo) VALUES ('Psicologo'),('Gestor Social'), ('Mantenimiento'),('Director')
            go

        create table tipo_expediente(
        id_tipo_exp int   IDENTITY(1,1) not null,
        valortipoexp varchar (50) not null,
        primary key  (id_tipo_exp)
        );
    INSERT INTO tipo_expediente (valortipoexp) VALUES ('Psicologico'),('Social')
            go
        create table rol(
        id_rol int  IDENTITY(1,1) not null,
        descripcion_rol varchar (50) not null,
        primary key  (id_rol)
        );
        go
        INSERT INTO rol (descripcion_rol) VALUES ('Empleado'), ('Estudiante'), ('Mantenimiento'),('Administrador')
            go




        create table Permiso_Rol(
                Rol_id int not null,
                Permiso_id_ int not null,
                primary key (Rol_id, Permiso_id_),

                CONSTRAINT  fk_rol_Permiso
                FOREIGN KEY ( Rol_id )
                REFERENCES    rol  ( id_rol),
                CONSTRAINT  fk_Permiso_Rol
                FOREIGN KEY (  Permiso_id_ )
                REFERENCES    Permiso  ( Permiso_id)

            );
        go
        insert into Permiso_Rol (Rol_id,Permiso_id_)values
                                        (1,1),
                                        (1,3),
                                        (1,4),
                                        (1,6),
                                        (1,7)

            go




        create table tipo_solicitud(
        id_tipo_solicitud int  IDENTITY(1,1) not null,
        valor_tipo_solicitud varchar (50) not null,
        primary key (id_tipo_solicitud)
        );
        go
      INSERT INTO tipo_solicitud (valor_tipo_solicitud) VALUES ('Cita'),('Reparacion'), ('Administrativa')
            go

        create table estado_solicitud(
        id_estado_solciitud int   IDENTITY(1,1) not null,
        valor_estado_solciitud varchar (50) not null,
        primary key (id_estado_solciitud)
        );
     INSERT INTO estado_solicitud (valor_estado_solciitud) VALUES ('Recibido'),('Atendiendo'), ('Suspendido'), ('Solucionado'), ('Cancelado'), ('Proceso de aprobacion'),('vencido')
            go


        create table prioridad_solicitud(
        id_prioridad_solciitud int  IDENTITY(1,1) not null,
        valor_prioridad_solciitud varchar (50) not null,
        tiempodesolucion_horas int not null,
        primary key (id_prioridad_solciitud)
        );
        go
     INSERT INTO prioridad_solicitud (valor_prioridad_solciitud, tiempodesolucion_horas) VALUES ('Alta',24),('Media',48), ('Baja',72), ('Urgente',8)
            go


        --
        create table tipo_espacio(
        id_tipo_espacio int  IDENTITY(1,1) not null,
        valor_tipo_espacio varchar (20) not null,
        primary key (id_tipo_espacio)
         );
        go
    INSERT INTO tipo_espacio (valor_tipo_espacio) VALUES ('Residencial'),('Recreativo'), ('Almacenamiento')
            go


        create table tipo_elemento (
        id_tipo_elemento int  IDENTITY(1,1) not null,
        valor_tipo_elemento varchar (30) not null,
        primary key (id_tipo_elemento)
        );
        go
    INSERT INTO tipo_elemento (valor_tipo_elemento) VALUES ('Uso Residencial'),('Uso Recreativo'), ('Tecnologico')
            go



        Create Table departamento (
            id_departamento int IDENTITY(1,1) not null,
            descripcion_departamento varchar (100) not null,
            primary key (id_departamento)
           );

go
    INSERT INTO departamento (descripcion_departamento) VALUES
                        ('ANTIOQUIA'),                    ('ATLANTICO'),
                        ('BOGOTA'),                    ('BOLIVAR'),
                        ('BOYACA'),                    ('CALDAS'),
                        ('CAQUETA'),                    ('CAUCA'),
                        ('CESAR'),                    ('CORDOBA'),
                        ('CUNDINAMARCA'),                    ('CHOCO'),
                        ('HUILA'),                    ('GUAVIARE'),
                        ('MAGDALENA'),                    ('META'),
                        ('NARIÃ‘O'),                    ('N. DE SANTANDER'),
                        ('QUINDIO'),                    ('RISARALDA'),
                        ('SANTANDER'),                    ('SUCRE'),
                        ('TOLIMA'),                    ('VALLE DEL CAUCA'),
                        ('ARAUCA'),                    ('CASANARE'),
                        ('PUTUMAYO'),                    ('SAN ANDRES'),
                        ('AMAZONAS'),                    ('GUAINIA'),
                        ('LA GUAJIRA'),                    ('VAUPES'),
                        ('VICHADA')
go
        create table pais(
                id_pais int IDENTITY(1,1) not null,
                descripcionPais varchar(100) not null,
                primary key (id_pais)
                );
        go
        INSERT INTO pais (descripcionPais) VALUES
                                ('ARGENTINA'),  ('BOLIVIA'),
                                ('BRASIL'),     ('COLOMBIA'),
                                ('CHILE'),      ('ECUADOR'),
                                ('GUYANA'),     ('PARAGUAY'),
                                ('PERU'),       ('SURINAM'),
                                ('URUGUAY'),    ('VENEZUELA'),
                                ('GUAYANA FRANCESA'), ('ISLAS MALVINAS')


        create table raza (
        id_raza int IDENTITY (1,1) not null,
        descripcion_raza varchar (14) not null,
        primary key (id_raza)
        );
        go
        INSERT INTO raza (descripcion_raza) VALUES ('Afrocolombiano'),('Raizal'),('Indigena'),('Mulato'),('Rom'),('Negro'),('Ninguno')
        go

        
        create table tipodesangre(
            id_tipo_sangre int IDENTITY(1,1)  not null,
            descripcion_tipo_sangre varchar(11) not null,
            primary key(id_tipo_sangre)
        );
        go
        INSERT INTO tipodesangre (descripcion_tipo_sangre) VALUES   ('O -'),('O +'),
                                                                    ('A -'),('A +'),
                                                                    ('B -'),('B +'),
                                                                    ('AB -'),('AB +')                                                        
        go

        create table tipodevivienda (
        id_tipodevivienda int IDENTITY(1,1) not null,
        descripcion_tipovivienda varchar(9) not null,
        primary key (id_tipodevivienda)
        );
        INSERT INTO tipodevivienda (descripcion_tipovivienda) VALUES ('Arrendada'),('Familiar'),('Propia')
        go

        create table estado_espacio (
            id_estado_espacio int IDENTITY (1,1) not null primary key,
            valor_estado_espacio varchar (10) not null,
            );
        go
        insert into estado_espacio (valor_estado_espacio) values ('Disponible'), ('Ocupado')
        go

        create table espacio (
                id_espacio int  IDENTITY(1,1) not null,
                descripcion_espacio varchar (100) not null,
                capacidad int ,
                cupo int ,
                id_tipo_espacio_ int not null,
                id_piso_espacio int not null,
                estado_espacio_o int not null,
                primary key (id_espacio),
                    CONSTRAINT  fk_espacio_piso
                        FOREIGN KEY (  id_piso_espacio )
                        REFERENCES    piso ( id_piso),
                    CONSTRAINT  fk_tipo_espacio
                        FOREIGN KEY (  id_tipo_espacio_ )
                        REFERENCES    tipo_espacio ( id_tipo_espacio),
                  CONSTRAINT  fk_estado_espacio
                        FOREIGN KEY (  estado_espacio_o )
                        REFERENCES   estado_espacio ( id_estado_espacio)
                  
                  
                );
        go
        insert into espacio (descripcion_espacio,id_tipo_espacio_,id_piso_espacio,capacidad,estado_espacio_o,cupo) values 
                                    ('301',  1,3,2,2,0),
                                    ('401',  1,4,1,1,1),
                                    ('402',  1,4,2,1,2),
                                    ('403',  1,4,1,1,1),
                                    ('404',  1,4,2,1,2 ),
                                   ('Bodega',3,1,100,1,0 )
        go


        create table DirectorioActivo(
            id_directorio_ int Identity(1,1)not null,
            correo_directorio varchar(300) not null,
            contrasena varchar(50) not null,
            id_rol_Directorio int not null,                   -- Rol
            Estado_directorio_CRU int not null,               -- Estado
            --
            TipoIdentificacion   int not null,                -- Tabla TipoID
            NumeroIdentificacion varchar(15) not null,
            Nombres              varchar (100) not null,
            Apellidos            varchar (100) not null,
            ---
            Estadocivil          int not null,                   --Tabla EstadoCivil
            Estrato              int  not null,
            Direccion           varchar (100) not null,
            Telefono            varchar (20) not null,
            Tipo_sangre         int not null,                    --tabla TipoSangre
            --
            Fechanacimiento      datetime not null,
            MunicipioNacimiento  varchar(100) not null,
            DepartamentoNacimiento int not null,                 --Tabla Departamento
            Paisnacimiento         int not null,                --Tabla Pais
            primary key( id_directorio_),
            CONSTRAINT  fk_directorio_Rol
                FOREIGN KEY ( id_rol_Directorio )
                REFERENCES    rol ( id_rol),

             CONSTRAINT  fk_directorio_estado
                FOREIGN KEY ( Estado_directorio_CRU )
                REFERENCES    estado_usuario_cru ( Id_estado_usuario_cru),

            CONSTRAINT  fk_tipodocumentoDirectorio
                    FOREIGN KEY (  TipoIdentificacion )
                    REFERENCES    tipoidentificacion  (  id_tipoidentificacion ),
            CONSTRAINT  fk_estadocivil_Directorio
                    FOREIGN KEY (  Estadocivil )
                    REFERENCES    estadocivil  ( id_estadocivil),

                CONSTRAINT  fk_tiposangre_Directorio
                    FOREIGN KEY (  Tipo_sangre)
                    REFERENCES    tipodesangre  (  id_tipo_sangre ),
            CONSTRAINT  fk_pais_Directorio
                    FOREIGN KEY (  Paisnacimiento)
                    REFERENCES    Pais  (  id_pais ),

              CONSTRAINT  fk_departamento_Directorio
                    FOREIGN KEY (  departamentoNacimiento)
                    REFERENCES    departamento  (  id_departamento )

            
            
        );
go
        --('Activo'),('Retirado'),('Admitido'), ('En proceso Admision'), ('Expulsado'), ('Inactivo')
        -- INSERT INTO cargo (valor_cargo) VALUES ('Psicologo'),('Gestor Social'), ('Mantenimiento'),('Director')
               
        --3:56 Pm
        create table empleado(
                id_empleado int  IDENTITY(1,1) not null,
                cargo_empleado int not null,                -- Tabla Cargo
                empleado_directorio int not null,           --Tabla Directorio
                primary key (id_empleado),                  
                    CONSTRAINT  fk_cargo_empleado
                        FOREIGN KEY (cargo_empleado )
                        REFERENCES    cargo (  id_cargo ),
                    CONSTRAINT  fk_Empleado_directorio
                        FOREIGN KEY (empleado_directorio )
                        REFERENCES    DirectorioActivo (  id_directorio_ )
        );
        GO

        --3:34 Pm Pendeinte
       



    


        create table estudiante(
            id_estudiante int  IDENTITY(1,1) not null,

            Servicio_Salud                            varchar (200) not null,
            Dispacidad_estudiante                     varchar (2) not  null,
            descripcion_dispacacidad_estudainte       varchar (200),
            Situaciondesplazamientoestudiante          varchar (2) not null,
            Numerohermanos                             int not null,
           
            tipodevivienda_estudiante int not null, --Tabla  Tipovivienda
            apoyouniversidad varchar (2) not null,
            descripcion_apoyo_ varchar(100),
            raza_estudiante int not null,           --Tabla Raza
            id_espacio_estudiante int,              --Tabla Espacio
             id_directorio_estudiante int not null,     --Tabla    
            primary key (id_estudiante),
            
             CONSTRAINT  fk_estudiante_directorio
                        FOREIGN KEY (id_directorio_estudiante )
                        REFERENCES    DirectorioActivo (  id_directorio_ ),

                CONSTRAINT  fk_tipovivienda_estudiante
                    FOREIGN KEY (  tipodevivienda_estudiante )
                    REFERENCES    tipodevivienda  ( id_tipodevivienda  ),


                 CONSTRAINT  fk_raza_estudiante
                    FOREIGN KEY (  raza_estudiante )
                    REFERENCES    raza  ( id_raza),
             
                CONSTRAINT  fk_espacio_estudiante
                    FOREIGN KEY (id_espacio_estudiante   )
                    REFERENCES    espacio ( id_espacio) 

        );
        go


           create table historicoestudiante(
        id_historico_expediente int  IDENTITY(1,1) not null,
        id_estudiante int not null,
        fecha_historico_expediente datetime not null,
        descripcion_historico_expediente varchar (500) not null,
        id_empleado_historicoestudiante int,
        primary key (id_historico_expediente),

          CONSTRAINT  fk_estudiante_historico
                FOREIGN KEY (id_estudiante )
                REFERENCES    estudiante ( id_estudiante ),
          CONSTRAINT  fk_empleado_historicoestudiante
                FOREIGN KEY (id_empleado_historicoestudiante )
                REFERENCES    empleado( id_empleado )

        );
        go
    -- Estos
            

                create PROCEDURE  Insertar_Nuevo_Directorio
                 
                   
                --Fijo para todos
                @correo varchar(300),
                @contrasena varchar (50),     
                --
                @TipoIdentificacion   int ,                -- Tabla TipoID
                @NumeroIdentificacion varchar(15) ,
                @Nombres              varchar (100) ,
                @Apellidos            varchar (100) ,
               
                ---
                @Estadocivil          int,                   --Tabla EstadoCivil
                @Estrato              int ,
                @Direccion           varchar (100),
                @Telefono            varchar (20),
                @Tipo_sangre         int,                    --tabla TipoSangre
                --
                @Fechanacimiento      datetime ,
                @MunicipioNacimiento  varchar(100) ,
                @DepartamentoNacimiento int ,                 --Tabla Departamento
                @Paisnacimiento         int ,                --Tabla Pais
                -- Para Empleado
                @cargo_empleado int ,                -- Tabla Cargo
               
                ---- Para Estudiante
                @Servicio_Salud                            varchar (200) ,
                @Dispacidad_estudiante                     varchar (2) ,
                @descripcion_dispacacidad_estudainte       varchar (200),
                @Situaciondesplazamientoestudiante          varchar (2),
                @Numerohermanos                             int ,
                -- Para estudiante parte 2
                @tipodevivienda_estudiante int ,             --Tabla  Tipovivienda
                @apoyouniversidad                        varchar (2) ,
                @descripcion_apoyo_                        varchar(100),
                @raza_estudiante                           int ,                      --Tabla Raza
                @id_espacio_estudiante                       int    ,
                @empleadoquemodifica int           --Tabla Espacio
                as 
            
                declare @id_role int,  @id_enviar_directorio int  , @nuevoestudiante int, @fecha_modificacion datetime
                BEGIN
                set @fecha_modificacion = (select CURRENT_TIMESTAMP);
                if @cargo_empleado =0
                    --Estudiante
                    BEGIN
                        insert into DirectorioActivo (correo_directorio ,contrasena ,id_rol_Directorio ,
                                                                        Estado_directorio_CRU , TipoIdentificacion   , NumeroIdentificacion ,
                                                                Nombres              ,
                                                                Apellidos            ,
                                                                   
                                                                ---
                                                                Estadocivil          ,                   --Tabla EstadoCivil
                                                                Estrato              ,
                                                                Direccion           ,
                                                                Telefono            ,
                                                                Tipo_sangre         ,                    --tabla TipoSangre
                                                                --
                                                                Fechanacimiento      ,
                                                                MunicipioNacimiento  ,
                                                                DepartamentoNacimiento,                 --Tabla Departamento
                                                                Paisnacimiento )values 
                                                                (@correo, ENCRYPTBYPASSPHRASE('P4zZW0r4', @contrasena) ,2,
                                                                    1, @TipoIdentificacion,  @NumeroIdentificacion, @Nombres , 
                                                                 @Apellidos , @Estadocivil , 
                                                                 @Estrato ,   @Direccion , @Telefono  ,
                                                                 @Tipo_sangre , @Fechanacimiento ,
                                                                 @MunicipioNacimiento  ,@DepartamentoNacimiento, 
                                                                 @Paisnacimiento 
                                                                 );
                                        set @id_enviar_directorio = @@IDENTITY;

                                        insert into estudiante (Servicio_Salud , Dispacidad_estudiante      ,
                                                              descripcion_dispacacidad_estudainte , Situaciondesplazamientoestudiante ,
                                                              Numerohermanos  ,tipodevivienda_estudiante , 
                                                              apoyouniversidad, descripcion_apoyo_ ,
                                                                raza_estudiante,
                                                              id_espacio_estudiante , id_directorio_estudiante)    
                                
                                                                values    (@Servicio_Salud, @Dispacidad_estudiante, 
                                                                @descripcion_dispacacidad_estudainte, @Situaciondesplazamientoestudiante,
                                                                @Numerohermanos, @tipodevivienda_estudiante,
                                                                @apoyouniversidad , @descripcion_apoyo_ ,
                                                                @raza_estudiante  , @id_espacio_estudiante  ,@id_enviar_directorio);
                                        set @nuevoestudiante = @@IDENTITY;
                                        insert into historicoestudiante (id_estudiante, fecha_historico_expediente, descripcion_historico_expediente, id_empleado_historicoestudiante)
                                                values (@nuevoestudiante,@fecha_modificacion, 'Se ha registrado el expediente',  @empleadoquemodifica);
                    END
                else
                    --Empleado
                    BEGIN
                        BEGIN
                        if @cargo_empleado=1
                            BEGIN
                                set @id_role=1
                            END
                        END
                        BEGIN
                        if @cargo_empleado=2  
                            BEGIN
                                set @id_role=1
                            END
                        END
                        BEGIN
                         if @cargo_empleado=3
                            BEGIN
                                set @id_role=3
                            END
                        End
                        BEGIN
                         if @cargo_empleado=4
                            BEGIN
                                set @id_role=4
                            END
                         END

                          insert into DirectorioActivo (correo_directorio ,contrasena ,id_rol_Directorio ,
                                                          Estado_directorio_CRU , TipoIdentificacion   , NumeroIdentificacion ,
                                                  Nombres              ,
                                                  Apellidos            ,
                                                 
                                                  ---
                                                  Estadocivil          ,                   --Tabla EstadoCivil
                                                  Estrato              ,
                                                  Direccion           ,
                                                  Telefono            ,
                                                  Tipo_sangre         ,                    --tabla TipoSangre
                                                  --
                                                  Fechanacimiento      ,
                                                  MunicipioNacimiento  ,
                                                  DepartamentoNacimiento,                 --Tabla Departamento
                                                  Paisnacimiento )values 
                                                  (@correo, ENCRYPTBYPASSPHRASE('P4zZW0r4', @contrasena) ,@id_role,
                                                    1, @TipoIdentificacion,  @NumeroIdentificacion, @Nombres , 
                                                 @Apellidos , @Estadocivil , 
                                                 @Estrato ,   @Direccion , @Telefono  ,
                                                 @Tipo_sangre , @Fechanacimiento ,
                                                 @MunicipioNacimiento  ,@DepartamentoNacimiento, 
                                                 @Paisnacimiento 
                                                 );
                            set @id_enviar_directorio = @@IDENTITY;
                        insert into empleado (cargo_empleado,  empleado_directorio)values
                                             (@cargo_empleado, @id_enviar_directorio);
                    END
                END
            GO 



--**********************************************************
     --
--                            VALUES  (1,1,'1012333333','Jefer.','Leal',1,'Cra 45 No 52 - 25','2225552','jefers@gmail.com',4,'01-01-1992','Bogota',11,4,'Compensar','No','Ninguna','No',0,3,1,'No','Ninguno',7,1,'123456',2 ),
  --                                  (1,1,'1012666666','Oscar.','Leal',1,'Cll 45 No 52 - 25','2225552','oscars@gmail.com',2,'02-09-1992','Mesa',23,4,'Famisanar','No','Ninguna','No',2,3,3,'No','Ninguno',7,1,'123456',2)
--go




        create table datosuniversidad (
            id_datosuniversidad int IDENTITY (1,1) not null primary key,
        Universidad_estudiante varchar (200) not null,
        Facultad_estudiante varchar (200) not null,
        Programa_estudiante varchar (200) not null,
        Puntaje_Basico_Matricula varchar (20) not null,-- 0  a 50
        Promedio_Academico_estudiante varchar (20),
       AÃ±o_ingreso_Universidad_ varchar  (4) not null,
       semestre_ingreso_universidad int not null,
        Porcentaje_Avance varchar (2),
        id_estudiante_datosuniversidad int not null ,

     CONSTRAINT  fk_datosuniversidad_estudiante
                FOREIGN KEY ( id_estudiante_datosuniversidad )
                REFERENCES    estudiante ( id_estudiante)

        );
        go

   -- INSERT into datosuniversidad (Universidad_estudiante,
   --                             Facultad_estudiante,
     --                           Programa_estudiante, 
       --                         Puntaje_Basico_Matricula,
         --                       Promedio_Academico_estudiante,
           --                     AÃ±o_ingreso_Universidad_,
             --                   semestre_ingreso_universidad,
               --                 Porcentaje_Avance,
                 --               id_estudiante_datosuniversidad
                   --             ) VALUES 
                     --           ('Universidad Nacional','Ingenieria','Ing. sistemas','9.112','4.5','2012',1,'50',1),
                       --         ('Universidad Nacional','Ingenieria','Ing. sistemas','8.412','4.8','2011',1,'80',2)


        create table acudiente_estudiante(
        id_acudiente  int IDENTITY(1,1) not null,
        dependencia_econo_ varchar (2) not null,
        nombre_acudiente varchar (100)  not null,
        apellidos_acudiente varchar (100) not null,
        ocupacion_acudiente varchar (100) not null,
        direccion_acudiente varchar(200) not null,
        departamento_acudiente int not null,
        telefono_acudiente varchar (20) not null,
        parentezo_acudiente varchar (100) not null,
        correo_acudiente varchar (100) not null,
        id_estudiante_acu int not null,
        primary key (id_acudiente),
         CONSTRAINT  fk_acudiente_departamento
                FOREIGN KEY (  departamento_acudiente )
                REFERENCES    departamento ( id_departamento),
         CONSTRAINT  fk_acudiente_estudiante
                FOREIGN KEY (  id_estudiante_acu )
                REFERENCES    estudiante  ( id_estudiante)
        );
        go

 --   INSERT into acudiente_estudiante (dependencia_econo_,
  --                                  nombre_acudiente,
 --                                   apellidos_acudiente,
 --                                   ocupacion_acudiente,
 --                                   direccion_acudiente,
  --                                  departamento_acudiente,
 --                                   telefono_acudiente,
--                                      parentezo_acudiente,
 --                                   correo_acudiente,
 --                                   id_estudiante_acu
 --                                   ) values    ('No','Jose', 'Gonzalez', 'Empleado','Call 4 No 2 - 1 ',   8 ,'320000005','Abuelo','jose@hotmail.com',1),
 --                                               ('No','Miria','Espinosa', 'Empleado','Calle 5 No 85 -  15',13,'6363636','Tia','Miria@hotmail.com',2)
       
go
        create table archivo_estudiante(

        id_archivo int not null,
        id_estudiante_archi int not null,
        descripcion_archivo varchar (100) not null,
        direccion_archivo varchar (500) not null,
        primary key (id_archivo),
         CONSTRAINT  fk_archivo_estudiante
                FOREIGN KEY (  id_estudiante_archi )
                REFERENCES    estudiante  (  id_estudiante ),
        
        );

go



    --  registros se crear por medio de proco por observaciones del empleado
  --          insert into  historicoestudiante (id_estudiante,
  --                                           fecha_historico_expediente, 
  --                                           descripcion_historico_expediente,
  --                                            id_empleado_historicoestudiante) 
  --                                          values 
  --                                          (1, '2017-01-05','Se registra el estudiante', null),
  --                                          (2, '2017-01-05','Se registra el estudiante', null),
  --                                          (2, '2017-01-06','Se actualiza acudiente' , 2)
  --      go



     



        create table elemento(
        id_elemento int  IDENTITY(1,1) not null,
        id_tipo_elemento_ int not null,
        descripcion varchar(50) not null,
        marca varchar(50) ,
        Modelo varchar (50),
        primary key (id_elemento),
           CONSTRAINT  fk_tipo_elemento
                FOREIGN KEY (  id_tipo_elemento_ )
                REFERENCES    tipo_elemento  ( id_tipo_elemento)
        );

        go
        INSERT INTO elemento (id_tipo_elemento_,descripcion, marca, Modelo)values 
                            (1,'Cama',null,null),
                            (1,'Estufa','HACEB', null),
                            (3,'Computador','HP', 'MXJasg3s5')

        go
        create table inventario_espacio(
        id_inventario_esp int   IDENTITY(1,1) not null,
        id_elemento_inventario_espacio int not null,
        cantidad_inventario_elemento_espacio int not null,
        fecha_inventario_espacio datetime not null,
        id_espacio_inventario__ int not null,
        primary key (id_inventario_esp),
           CONSTRAINT  fk_elemento_inventario
                FOREIGN KEY (  id_elemento_inventario_espacio )
                REFERENCES    elemento  ( id_elemento),
           CONSTRAINT  fk_espacio_inventario
                FOREIGN KEY (  id_espacio_inventario__)
                REFERENCES    espacio  ( id_espacio)
          
        );
        go

   -- INSERT into inventario_espacio (
    --                                id_elemento_inventario_espacio,
  --                                 cantidad_inventario_elemento_espacio,
  --                                  fecha_inventario_espacio,
   --                                 id_espacio_inventario__,
   --                                 id_empleado_inventario
   --                                 )values 
--
   --                                     (1,2,'2017-2-1',1,3),
   --                                     (2,1,'2017-2-1',1,3),
   --                                     (1,1,'2017-2-1',2,3),
   --                                     (2,1,'2017-2-1',2,3)
    --                                    go


    create table historio_de_inventario(
        id_inventario_historico int Identity(1,1) primary key,
        id_empleado_historico_inventario  int not null,--
        descripcion_historico_inventario varchar (200) not null,
        fecha_historico_inventario datetime not null,
        inventario_id_ int not null,--
        

             CONSTRAINT  fk_historico_empleado
                FOREIGN KEY (   id_empleado_historico_inventario   )
                REFERENCES    empleado (id_empleado),

                 CONSTRAINT  fk_historico_inventario
                FOREIGN KEY ( inventario_id_)
                REFERENCES    inventario_espacio (id_inventario_esp)

                

        );

go


        create table solicitud (
        id_solicitud int  IDENTITY(1,1) not null,
        id_tipo_solicitud__ int not null,
        id_estado_solicitud__ int not null,
        
        id_prioridad_solciitud__ int not null,
        descripcion_solicitud varchar (200) not null,
        id_estudiante_solicitud int not null,
        id_empleado_solicitud int not null,
        primary key (id_solicitud),



           CONSTRAINT  fk_tipo_solicitud
                FOREIGN KEY ( id_tipo_solicitud__ )
                REFERENCES    tipo_solicitud (id_tipo_solicitud),
           CONSTRAINT  fk_estado_solicitud
                FOREIGN KEY ( id_estado_solicitud__ )
                REFERENCES    estado_solicitud ( id_estado_solciitud),

         
           CONSTRAINT  fk_prioridad_solicitud
                FOREIGN KEY ( id_prioridad_solciitud__ )    
                REFERENCES    prioridad_solicitud (id_prioridad_solciitud ),
                CONSTRAINT  fk_empleado_solicitud
                FOREIGN KEY (  id_empleado_solicitud)
                REFERENCES    empleado ( id_empleado),
           CONSTRAINT  fk_estudiante_solcitud
                FOREIGN KEY ( id_estudiante_solicitud )
                REFERENCES    estudiante (id_estudiante )
        );
go
  --  insert into solicitud  (
  --                            id_tipo_solicitud__,
   --                             id_estado_solicitud__,
  --                            
   --                             id_prioridad_solciitud__,
  --                              descripcion_solicitud,
   --                             id_estudiante_solicitud,
   --                             id_empleado_solicitud
   --                             ) values (1,4,2,'No puedo dormir biem. tengo muchas pesadillas', 1,2),
   --                                     (1,4,2,'Se rompio el lavamanos',1,3)


       go
        create table reparacion_espacio(
        id_reparacion int  IDENTITY(1,1) not null,
        fecha_reparacion_espacio datetime  not null,
        descripcion_reparacion varchar (500) not null,

        espacio_reparacion int not null, 
        
        costo bigint not null,
        id_solicitud_reparacion_espacio int not null,

        primary key (id_reparacion),
         
            CONSTRAINT  fk_espacio_reparacion
                FOREIGN KEY (  espacio_reparacion)
                REFERENCES    espacio ( id_espacio),

            CONSTRAINT  fk_solicitud_reparacion
                FOREIGN KEY (  id_solicitud_reparacion_espacio)
                REFERENCES    solicitud ( id_solicitud)


        );
        go
  --  insert into reparacion_espacio (fecha_reparacion_espacio,
   --                                 descripcion_reparacion,
  --                                  id_espacio_reparacion,
                                   
   --                                 costo,
--id_solicitud_reparacion_espacio,
   --                                 id_empleado_reparacion
    --                                ) values ('2017-02-03','Se realiza compra de lavamanos e instalacion',1,100000,2,3)

   -- go



        create table historico_solicitud(
        id_historico_solicitud int  IDENTITY(1,1) not null,
        id_caso_anotacion int not null,
        descripcion_anotacion varchar (200) not null,
        fecha_modificacion datetime not null,
        id_empleado_historico int,
        primary key (id_historico_solicitud),
           CONSTRAINT  fk_solcitud_historio
                FOREIGN KEY (  id_caso_anotacion)
                REFERENCES    solicitud ( id_solicitud),
           CONSTRAINT  fk_empleado_historio
                FOREIGN KEY (  id_empleado_historico)
                REFERENCES    empleado ( id_empleado)

        );
go

        create table solucion(
        id_solucion int  IDENTITY(1,1) not null,
        descripcion_solucion varchar(100) not null,
        id_empleado_solucion int,
        fecha_solucion datetime, 
        primary  key (id_solucion),
        id_solicitud_solucion int not null,
           CONSTRAINT  fk_solucion_solicitud
                FOREIGN KEY (  id_solicitud_solucion)
                REFERENCES    solicitud ( id_solicitud),
            CONSTRAINT  fk_empleado_solucion
                FOREIGN KEY (  id_empleado_solucion)
                REFERENCES    empleado ( id_empleado)
        );
go


        create table estado_cita(
        id_estado_cita int   IDENTITY(1,1) not null,
        valor_estado_cita varchar (50) not null,
        primary key (id_estado_cita)
        );
        go
     INSERT INTO estado_cita (valor_estado_cita) VALUES ('Pendiente'), ('Atendida'),('No asistio'),('Cancelada');
            go

     create table expediente (
        id_expediente int  IDENTITY(1,1) not null,
        id_tipo_exp int not null,
       

        fecha_expediente datetime not null,
        descripcion_Expediente varchar(500) not null,
       

        primary key (id_expediente),
          
            CONSTRAINT  fk_tipo_exo
                FOREIGN KEY (  id_tipo_exp )
                REFERENCES    tipo_expediente  ( id_tipo_exp)
        );
     go

        create table cita(
            id_cita int  IDENTITY(1,1)not null,
            
        
             id_solicitud_cita int not null,
             estado_cita_ int not null, 
             id_expediente_cita int null, 
             fecha_cita datetime not null,
             primary key (id_cita),

             

               
                
                CONSTRAINT  fk_cita__solicitud
                FOREIGN KEY (  id_solicitud_cita)
                REFERENCES    solicitud ( id_solicitud),
                
                CONSTRAINT  fk_cita_expediente
                FOREIGN KEY (  id_expediente_cita)
                REFERENCES    expediente ( id_expediente),


                CONSTRAINT  fk_cita_estado
                FOREIGN KEY ( estado_cita_ )
                REFERENCES    estado_cita ( id_estado_cita)
                
        );

    go



     
--*************************************************

    --Procedimientos almacenados version 12-04-2017

    --1. Consulta el corre y contraseÃ±a y me devuelve el numero de identificacion
  CREATE PROCEDURE Consultar_Login
        @correo varchar (100), 
        @pass varchar (300)

        AS
        DECLARE @PassEncode As varchar(300)
        DECLARE @PassDecode As varchar(50)

        BEGIN

                SELECT @PassEncode = DirectorioActivo.contrasena From DirectorioActivo WHERE DirectorioActivo.correo_directorio = @correo
                SET @PassDecode = DECRYPTBYPASSPHRASE('P4zZW0r4', @PassEncode)
                SELECT DirectorioActivo.NumeroIdentificacion, DirectorioActivo.id_directorio_  FROM DirectorioActivo WHERE (DirectorioActivo.correo_directorio = @correo AND @PassDecode=@pass)
           

        END
        GO

    --2. consultar los permisos por rol del usuarios con el correo

    create procedure Consultar_Permisos_por_Usuario
                @correo varchar (100)

                as


                begin

                           SELECT        Permiso_id_, descripcion
                                        FROM            Permiso_Rol INNER JOIN
                                         Permiso ON Permiso_Rol.Permiso_id_ = Permiso.Permiso_id INNER JOIN
                                         rol ON Permiso_Rol.Rol_id = rol.id_rol INNER JOIN
                                         DirectorioActivo ON rol.id_rol = DirectorioActivo.id_rol_Directorio
                                         where DirectorioActivo.correo_directorio= @correo;
                        END 

go




--3. Cargar Direnctorio Activo

                    --usuarioadministrador

EXEC    Insertar_Nuevo_Directorio    'admin@admini.com','123456', 1,'0000000','Administrador','CRU', 1, 1,
                                    'CRU - SEDE','9999999', 1,'01-01-2000','Bogota', 11,4, 4,'Jeferson CORP EPS',
                                    'No','Ninguna','No', 0,3,'No','Ninguna', 7, 0,1
                                    go
                        --Estudiante
EXEC    Insertar_Nuevo_Directorio 'jefers@gmail.com','123456',1,'111111','Jeferson','Guevara',1,2,'Cra 48 - 52 69',
                                        '2589632',2,'01-01-1992','La mesa',11,4,0,'Compensar','No','Ninguna',
                                        'No',2,3,'No','Ninguno',7,1,1
                                        go
                   

                            --EStudiante
   EXEC Insertar_Nuevo_Directorio 'oscar@gmail.com','123456',1,'2222222','Oscar','Guevara', 1,3,'Cll 43 No 58',
                                    '852147', 2,'02-08-1988','Oiba',21, 4,0,'Famisanar','No','Ninguna',
                                    'No', 2,3,'No','Ninguno', 7,1,1
                                    go
                            --Psicologo
      EXEC Insertar_Nuevo_Directorio  'psicologo@gmail.com','123456', 1,'333333','Aleja','Leal', 1, 1,'Calle 47 - 58 ',
                                     '33333333', 5,'01-05-1994','Bogota',11, 4, 1,'Ninguno','No','Ninguna','Ninguna',
                                     0,2,'No','Ninguno',7, 0,1
 go
                            --Director
   EXEC    Insertar_Nuevo_Directorio 'director@corre.com','123456', 1,'4444444','Jose','Primo', 2, 2,'Cra 85  -  47',
                                        '444444444', 2,'01-01-2000','Bogota',11,4, 4,'Colsubsidio','as',
                                        'as','as',0, 5,'as','as',1,1,1
                        --Mantenimiento
 go
    exec   Insertar_Nuevo_Directorio 'mantenimiento@correo.com','123456',1,'5555555','Juan','Gomez', 1, 2,'Cr 74 No 96',
                                        '5555555', 4,'05-09-2000','Mesitas ',11, 4, 3,'asd','as','asd','as', 1,
                                         1,'as','as', 1, 1,1


GO

--4. Consultar todos los empleados -- Vista solo para admisnistradores

   create proc Consultar_Todos_Empleados
        as 
     SELECT       DirectorioActivo.id_directorio_, DirectorioActivo.Nombres, DirectorioActivo.Apellidos, DirectorioActivo.NumeroIdentificacion,  cargo.valor_cargo, estado_usuario_cru.Descripcion_estado_usuario_cru, 
                         DirectorioActivo.Direccion, DirectorioActivo.Telefono, DirectorioActivo.correo_directorio
FROM            empleado INNER JOIN
                         DirectorioActivo ON empleado.empleado_directorio = DirectorioActivo.id_directorio_ INNER JOIN
                         cargo ON empleado.cargo_empleado = cargo.id_cargo INNER JOIN
                         estado_usuario_cru ON DirectorioActivo.Estado_directorio_CRU = estado_usuario_cru.Id_estado_usuario_cru INNER JOIN
                         estadocivil ON DirectorioActivo.Estadocivil = estadocivil.id_estadocivil INNER JOIN
                         tipodesangre ON DirectorioActivo.Tipo_sangre = tipodesangre.id_tipo_sangre INNER JOIN
                         departamento ON DirectorioActivo.DepartamentoNacimiento = departamento.id_departamento
                         where DirectorioActivo.id_directorio_  <>1
                         
       GO







-- consultar tipos de combobox
 create proc Consultar_Tipos_de_Identificacion

    as
    SELECT        id_tipoidentificacion, valor_tipoidentificacion
    FROM            tipoidentificacion
    go

    create proc Consultar_Cargos
    as
    SELECT        id_cargo, valor_cargo
    FROM            cargo
    go

    create proc Consultar_Estados_Civiles
    as
    SELECT        id_estadocivil, valor_estadocivil
    FROM            estadocivil
    go

    create proc Consultar_Estados_Usuario
    as
    SELECT        Id_estado_usuario_cru, Descripcion_estado_usuario_cru
    FROM            estado_usuario_cru
    go


create proc Consultar_Tipo_Espacios 
as
Begin
SELECT        id_tipo_espacio, valor_tipo_espacio
FROM            tipo_espacio
END
GO

create proc Consultar_Pisos
as
Begin
SELECT        id_piso, valor_piso
FROM            piso
END
GO


create proc Consultar_Estados_Espacios
as
Begin
SELECT        id_estado_espacio, valor_estado_espacio
FROM            estado_espacio
END

GO

Create proc Consultar_Pais
as
SELECT        id_pais, descripcionPais
FROM            pais

GO

Create proc Consultar_Departamento
as
SELECT        id_departamento, descripcion_departamento
FROM            departamento

GO

Create proc Consultar_RH
as
SELECT        id_tipo_sangre, descripcion_tipo_sangre
FROM            tipodesangre

GO



Create Proc Consultar_Tipos_Elemento
as
BEGIN
SELECT  [id_tipo_elemento]
      ,[valor_tipo_elemento]
  FROM [PrototipoCRU].[dbo].[tipo_elemento]
 END
 GO


--Procedimientos para gestion de espacios

create proc Consultar_Espacios
as
BEGIN

SELECT        espacio.id_espacio, espacio.descripcion_espacio, espacio.capacidad, tipo_espacio.valor_tipo_espacio, piso.valor_piso, estado_espacio.valor_estado_espacio, espacio.cupo
FROM            espacio INNER JOIN
                         estado_espacio ON espacio.estado_espacio_o = estado_espacio.id_estado_espacio INNER JOIN
                         piso ON espacio.id_piso_espacio = piso.id_piso INNER JOIN
                         tipo_espacio ON espacio.id_tipo_espacio_ = tipo_espacio.id_tipo_espacio
END
GO


create proc Insertar_Nuevo_Espacio
@descripcion varchar(100),
@capacidad int,
@tipoespacio int,
@piso int
as
Begin
insert into espacio (descripcion_espacio, capacidad, cupo,id_tipo_espacio_,id_piso_espacio, estado_espacio_o) values
        (@descripcion, @capacidad, @capacidad, @tipoespacio,@piso,1 )

End
go





create proc Actualizar_Espacio
@id int,
@capacidad int,
@tipoespacio int

as

declare @cupo int, @capacidad_anterior int
set @capacidad_anterior = (select espacio.capacidad from espacio where espacio.id_espacio = @id);
Begin
if (@capacidad=@capacidad_anterior)
    BEGIN
        update espacio set id_tipo_espacio_ = @tipoespacio where espacio.id_espacio = @id ;
    END
if (@capacidad>@capacidad_anterior)
    BEGIN
        set @cupo = @capacidad - @capacidad_anterior;
        if (@cupo= 0)
            begin
            update espacio set id_tipo_espacio_ = @tipoespacio, espacio.cupo = @cupo, espacio.capacidad=@capacidad, espacio.estado_espacio_o = 2 where espacio.id_espacio = @id ;
            END
        update espacio set id_tipo_espacio_ = @tipoespacio, espacio.cupo = @cupo, espacio.capacidad=@capacidad where espacio.id_espacio = @id ;
    END
if (@capacidad<@capacidad_anterior)
    BEGIN
        set @cupo =  @capacidad_anterior - @capacidad ;
            if (@cupo= 0)
            begin
            update espacio set id_tipo_espacio_ = @tipoespacio, espacio.cupo = @cupo, espacio.capacidad=@capacidad, espacio.estado_espacio_o = 2 where espacio.id_espacio = @id ;
            END
            update espacio set id_tipo_espacio_ = @tipoespacio, espacio.cupo = @cupo, espacio.capacidad=@capacidad  where espacio.id_espacio = @id ;


    END
END
go



create proc Consultar_Un_Espacio
@id int
as

    SELECT        espacio.id_espacio, espacio.descripcion_espacio, espacio.capacidad, tipo_espacio.valor_tipo_espacio, piso.valor_piso, estado_espacio.valor_estado_espacio, espacio.cupo
                FROM            espacio INNER JOIN
                         estado_espacio ON espacio.estado_espacio_o = estado_espacio.id_estado_espacio INNER JOIN
                         piso ON espacio.id_piso_espacio = piso.id_piso INNER JOIN
                         tipo_espacio ON espacio.id_tipo_espacio_ = tipo_espacio.id_tipo_espacio
                         where espacio.id_espacio=@id;


go


  create proc Consultar_Un_Empleado
        @identificacion int
      
        as 
        BEGIN
        SELECT        DirectorioActivo.Nombres, DirectorioActivo.Apellidos, DirectorioActivo.NumeroIdentificacion, DirectorioActivo.Estrato, DirectorioActivo.Direccion, DirectorioActivo.Telefono, DirectorioActivo.Fechanacimiento, 
                         DirectorioActivo.MunicipioNacimiento, departamento.descripcion_departamento, estadocivil.valor_estadocivil, tipoidentificacion.valor_tipoidentificacion, tipodesangre.descripcion_tipo_sangre, 
                         estado_usuario_cru.Descripcion_estado_usuario_cru, cargo.valor_cargo, DirectorioActivo.correo_directorio, DirectorioActivo.id_directorio_
FROM            DirectorioActivo INNER JOIN
                         empleado ON DirectorioActivo.id_directorio_ = empleado.empleado_directorio INNER JOIN
                         cargo ON empleado.cargo_empleado = cargo.id_cargo INNER JOIN
                         departamento ON DirectorioActivo.DepartamentoNacimiento = departamento.id_departamento INNER JOIN
                         estado_usuario_cru ON DirectorioActivo.Estado_directorio_CRU = estado_usuario_cru.Id_estado_usuario_cru INNER JOIN
                         estadocivil ON DirectorioActivo.Estadocivil = estadocivil.id_estadocivil INNER JOIN
                         tipodesangre ON DirectorioActivo.Tipo_sangre = tipodesangre.id_tipo_sangre INNER JOIN
                         tipoidentificacion ON DirectorioActivo.TipoIdentificacion = tipoidentificacion.id_tipoidentificacion
                         where DirectorioActivo.id_directorio_ = @identificacion
       END
       GO




    create proc Actualizar_Empleado
                @correo varchar (300),
                
                @valor_estado_cru int,
                @valor_estadoci int,
                @estrato int,   
                @direccion varchar (100),
                @telefono_empl varchar (10),
                @valor_carg int,
                @id_directorio int
                as
                begin
        UPDATE [dbo].[DirectorioActivo]   SET [correo_directorio] = @correo,
                                              
                                              [Estado_directorio_CRU] = @valor_estado_cru,
                                              [Estadocivil] = @valor_estadoci,
                                              [Estrato] = @estrato,
                                              [Direccion] = @direccion,
                                              [Telefono] = @telefono_empl
                                              wHERE DirectorioActivo.id_directorio_ = @id_directorio;

         UPDATE [dbo].[empleado]  SET [cargo_empleado] =  @valor_carg where empleado.empleado_directorio = @id_directorio
      
         
         end
        GO


create proc Actualizar_Contrasena_Usuario
@id_directorio int,
@pass varchar (50)
as
update DirectorioActivo set   [contrasena] = (ENCRYPTBYPASSPHRASE('P4zZW0r4', @pass)) 
        where DirectorioActivo.id_directorio_ = @id_directorio;


go





 create proc Insertar_Nuevo_Elemento
  @tipoelemento int, 
  @descripcion varchar(50),
  @marca varchar (50),
  @Modelo varchar (50)

  as
  insert into elemento (id_tipo_elemento_, descripcion, marca, modelo) 
    values (@tipoelemento, @descripcion, @marca, @modelo)
  GO





--************************************************************

    


   







    


